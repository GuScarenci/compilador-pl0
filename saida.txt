CONST , keyword_const
x , identifier
@ , Invalid character
= , rel_op
5 , integer_literal
, , comma
y , identifier
= , rel_op
10 , integer_literal
; , semicolon
VAR , keyword_var
a , identifier
, , comma
b , identifier
; , semicolon
PROCEDURE , keyword_proc
Double , identifier
; , semicolon
BEGIN , keyword_begin
a , identifier
:= , assign_op
a , identifier
* , simb_mult
2 , integer_literal
END , keyword_end
; , semicolon
{olha , Unexpected line break. Comments must be inline. Did you mean to close your comment with '}' before skipping to the next line?
libas , identifier
dini} , Found invalid character on candidate identifier. Use only letters and digits for identifiers.
BEGIN , keyword_begin
a , identifier
:= , assign_op
x , identifier
+ , simb_plus
y , identifier
; , semicolon
CALL , keyword_call
Double , identifier
; , semicolon
IF , keyword_if
a , identifier
<! , Angular brackets are used for relational operators. Did you mean to write <, >, <= or >= ?
> , rel_op
30 , integer_literal
THEN , keyword_then
2b , Ident beggining with digits or invalid integer literal. Did you mean to write a number?
:= , assign_op
a , identifier
* , simb_mult
2 , integer_literal
ELSE , identifier
b , identifier
:= , assign_op
a , identifier
/ , simb_div
2 , integer_literal
; , semicolon
WHILE , keyword_while
b , identifier
> , rel_op
0 , integer_literal
DO , keyword_do
b_1 , Found invalid character on candidate identifier. Use only letters and digits for identifiers.
:= , assign_op
b , identifier
- , simb_minus
1 , integer_literal
END , keyword_end
. , period
BEGIN , keyword_begin
CONST , keyword_const
d , identifier
:= , assign_op
87697\2 , Found spurious symbol on integer literal. Did you mean to write a number?
; , semicolon
CONST , keyword_const
l , identifier
:= , assign_op
8765faz , Ident beggining with digits or invalid integer literal. Did you mean to write a number?
; , semicolon
CONST , keyword_const
p , identifier
:= , assign_op
298345 , integer_literal
% , Invalid character
67 , integer_literal
; , semicolon
CALL , keyword_call
Double , identifier
; , semicolon
